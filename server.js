// C:\Users\kreps\Documents\Projects\ReelTrack\server\server.js
console.log('--- –í–ï–†–°–Ü–Ø –°–ï–†–í–ï–†–ê –ó–ê–ü–£–©–ï–ù–ê ---');

import dotenv from 'dotenv';
dotenv.config();

console.log('JWT_SECRET from server.js (after dotenv.config()):', process.env.JWT_SECRET);

import express from 'express';
import mongoose from 'mongoose';
import morgan from 'morgan';
import path from 'path';
import { fileURLToPath } from 'url';

// –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –≤–∞—à—ñ –º–∞—Ä—à—Ä—É—Ç–∏
import authRoutes from './routes/authRoutes.js'; // –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ —Ü–µ 'authRoutes.js'
import userRoutes from './routes/userRoutes.js';
import watchlistRoutes from './routes/watchlistRoutes.js';
import friendRoutes from './routes/friendRoutes.js';
import contentRoutes from './routes/contentRoutes.js'; // <--- –î–û–î–ê–ù–û: –Ü–º–ø–æ—Ä—Ç –º–∞—Ä—à—Ä—É—Ç—ñ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç—É

// –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è __dirname –¥–ª—è ES –º–æ–¥—É–ª—ñ–≤
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const app = express();
const PORT = process.env.PORT || 5000;

// –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB
mongoose.connect(process.env.MONGODB_URI)
    .then(() => console.log('MongoDB Connected'))
    .catch(err => console.error('MongoDB connection error:', err));

// –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø MIDDLEWARE

// Morgan –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤
if (process.env.NODE_ENV === 'development') {
    app.use(morgan('dev'));
}

// *** –í–ê–ñ–õ–ò–í–û: –¶–ï–ô –ë–õ–û–ö –î–õ–Ø –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ò CORS ***
// –ù–µ –≤–∏–¥–∞–ª—è–π—Ç–µ –π–æ–≥–æ, –ø–æ–∫–∏ –ø—Ä–æ–±–ª–µ–º–∞ –Ω–µ –±—É–¥–µ –≤–∏—Ä—ñ—à–µ–Ω–∞.
app.use((req, res, next) => {
    const requestOrigin = req.headers.origin;
    console.log('\n--- CORS Debugging ---');
    console.log('Request Method:', req.method);
    console.log('Request URL:', req.url);
    console.log('Request Origin Header (from browser):', requestOrigin);
    console.log('Configured CLIENT_URL (from .env):', process.env.CLIENT_URL);
    
    res.setHeader('Access-Control-Allow-Origin', requestOrigin || '*'); 
    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, PATCH, OPTIONS');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');
    res.setHeader('Access-Control-Allow-Credentials', 'true');
    res.setHeader('Vary', 'Origin, Access-Control-Request-Headers');

    console.log('Attempting to set CORS headers manually.');
    
    if (req.method === 'OPTIONS') {
        console.log('Sending 204 response for OPTIONS preflight.');
        return res.sendStatus(204);
    }

    console.log('Proceeding to next middleware.');
    next();
});
// *** –ö–Ü–ù–ï–¶–¨ –î–Ü–ê–ì–ù–û–°–¢–ò–ß–ù–û–ì–û –ë–õ–û–ö–£ CORS ***


// –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ middleware –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥—É —Ç—ñ–ª–∞ –∑–∞–ø–∏—Ç—É
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—á–Ω–æ—ó –ø–∞–ø–∫–∏ –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—å
app.use('/uploads', express.static(path.join(__dirname, 'uploads')));

// –ú–ê–†–®–†–£–¢–ò API
app.get('/', (req, res) => {
    res.send('ReelTrack API is running!');
});

app.use('/api/auth', authRoutes);
app.use('/api/users', userRoutes);
// –î–æ–¥–∞–π—Ç–µ —ñ–Ω—à—ñ –≤–∞—à—ñ –º–∞—Ä—à—Ä—É—Ç–∏ —Ç—É—Ç:
app.use('/api/watchlist', watchlistRoutes);
app.use('/api/friends', friendRoutes);
app.use('/api/content', contentRoutes); // <--- –î–û–î–ê–ù–û: –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –º–∞—Ä—à—Ä—É—Ç—ñ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç—É

// –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫ (—Ä–æ–∑–º—ñ—Å—Ç—ñ—Ç—å –ø—ñ—Å–ª—è –≤—Å—ñ—Ö –º–∞—Ä—à—Ä—É—Ç—ñ–≤)
app.use((err, req, res, next) => {
    console.error(err.stack);
    res.status(err.statusCode || 500).json({
        message: err.message || '–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        stack: process.env.NODE_ENV === 'production' ? 'ü•û' : err.stack
    });
});


// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
    console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É ${PORT} —É —Ä–µ–∂–∏–º—ñ ${process.env.NODE_ENV}`);
    console.log(`–ö–ª—ñ—î–Ω—Ç—Å—å–∫–∞ —á–∞—Å—Ç–∏–Ω–∞ –æ—á—ñ–∫—É—î—Ç—å—Å—è –∑: ${process.env.CLIENT_URL}, ${process.env.CLIENT_URL_PROD}`);
});